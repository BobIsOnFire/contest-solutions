/*

Есть цветные шарики k цветов (a_i шариков цвета i). Нужно разложить все шарики в
коробки с выполнением следующих условий:

* во всех коробках должно совпадать суммарное количество шариков;
* в каждой коробке шариков цвета i должно быть не менее b_i (0 ≤ b_i ≤ a_i).

Максимизируйте количество коробок, в которые будут разложены шарики.

Первая строка входных данных содержит число k (1 ≤ k ≤ 10^5) — число цветов.
Во второй строке дано k чисел a_i (1 ≤ a_i ≤ 10^5, сумма всех a_i ≤ 10^5) —
количество шариков цвета i. В третьей строке дано k чисел b_i (0 ≤ b_i ≤ a_i) —
нижнее ограничение на количество шариков в каждой коробке.

В первой строке выведите два числа: n — количество коробок, которые можно
наполнить, и m — количество шариков в каждой коробке. Далее выведите n строк по 
m чисел в каждой — цвета шариков, которые лежат в очередной коробке.
Суммарное количество шариков цвета i во всех коробках должно быть равно a_i.
--------------------------------------------------------------------------------
Примеры:

ВВОД
5
1 2 3 4 5
1 2 3 4 5

ВЫВОД
1 15
1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 
---------------------------------------
ВВОД
1
10
0

ВЫВОД
10 1
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
---------------------------------------
ВВОД
5
4 5 5 5 5
1 1 1 1 1

ВЫВОД
4 6
1 2 3 4 5 5 
1 2 3 4 5 4 
1 2 3 4 5 3 
1 2 3 4 5 2 
--------------------------------------------------------------------------------
*/

#include <algorithm>
#include <sstream>
#include <iostream>
#include <vector>

int main() {
    int k;
    std::cin >> k;

    std::vector<int> a(k), b(k);
    
    int sum = 0;
    for (int i = 0; i < k; i++) {
        std::cin >> a[i];
        sum += a[i];
    }

    int max_boxes = sum;
    for (int i = 0; i < k; i++) {
        std::cin >> b[i];
        if (b[i]) max_boxes = std::min(max_boxes, a[i] / b[i]);
    }

    while (sum % max_boxes) max_boxes--;

    int spots = sum / max_boxes;
    std::cout << max_boxes << " " << spots << "\n";

    std::stringstream common_ss;
    int common_size = 0;

    for (int i = 0; i < k; i++) {
        common_size += b[i];
        for (int bi = 0; bi < b[i]; bi++) common_ss << i+1 << " ";
    }

    std::string common = common_ss.str();

    int rest_size = spots - common_size;
    std::vector<int> rest(rest_size * max_boxes);
    int j = 0;

    for (int i = 0; i < k; i++) {
        for (int bi = 0; bi < a[i] - b[i] * max_boxes; bi++) rest[j++] = i+1;
    }

    auto iter = rest.begin();
    for (int i = 0; i < max_boxes; i++) {
        std::cout << common;
        for (int j = 0; j < spots - common_size; j++) std::cout << *(iter++) << " ";
        std::cout << "\n";
    }

    return 0;
}
